// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session    Session[]
  tenantUser TenantUser[]

  profile      Profile?       @relation(fields: [profileId], references: [id])
  profileId    String?        @unique
  RefreshToken RefreshToken[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  tokenHash String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Profile {
  id        String   @id @default(cuid())
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships TenantUser[]
}

model TenantUser {
  id       String @id @default(cuid())
  tenantId String
  userId   String
  roleId   Int

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@unique([tenantId, userId])
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  permissions RolePermission[]
  TenantUser  TenantUser[]
}

model Permission {
  id     Int              @id @default(autoincrement())
  action String           @unique
  roles  RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}
